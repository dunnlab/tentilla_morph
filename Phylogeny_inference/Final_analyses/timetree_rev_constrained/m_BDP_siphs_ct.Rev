############################################################################################
#   File: timetree tutorial birth-death, rho=10/147 model specification file -- FIXED topology
############################################################################################

## read in the tree 
backbone <- readTrees("timetree_rev_constrained/concatenate.backbone.contree")[1]

### get helpful variables from the tree
n_taxa <- backbone.ntips()
taxa <- backbone.taxa()

data = readDiscreteCharacterData("concatenate.fasta")

# Get some useful variables from the data. We need these later on.
taxa <- data.taxa()
n_taxa <- data.ntaxa()

mi = 1

#######################################
###### birth-death process model  #####
#######################################

### diversification = birth_rate - death_rate
### assume an exponential prior distribution 
### and apply a scale proposal
diversification ~ dnExponential(10.0) 

### turnover = death_rate / birth_rate
### this parameter can only take values between 0 and 1
### use a Beta prior distribution
### and a slide move
turnover ~ dnBeta(2.0, 2.0) 

### the parameters of the BDP include birth and death rates
### these are deterministic variables of the diversification & turnover
##### create a variable to ensure the rates are always positive (RealPos)
denom := abs(1.0 - turnover) 
##### birth_rate = diversification / (1 - turnover)
birth_rate := diversification / denom
##### death_rate = (turnover * diversification) / (1 - turnover)
death_rate := (turnover * diversification) / denom

### rho is the probability of sampling species at the present
### fix this to 0.068, since there are ~147 described species of caniforms (bears, dogs, mustelids, pinnipeds, etc.)
### and we have sampled 10
rho <- 0.068

### the root age is an independent stochastic node with a lognormal prior
### the mean of the lognormal distribution is set to 15 Mya older than the observed fossil
### when offset by tHesperocyon, this gives a mean root_time of 49 Mya
mean_ra <- 0.5
stdv_ra <- 0.001
### the lognormal distribution is parameterized by mu which is a function of the mean and standard deviation
mu_ra <- ln(mean_ra) - ((stdv_ra*stdv_ra) * 0.5)
root_time ~ dnLnorm(mu_ra, stdv_ra, offset=1)

#Constraints on clades

clade_A = clade("Resomia_ornicephala", "Frillagalma_vityazi")
clade_B = clade("Cordagalma_ordinatum", "Forskalia_formosa", "Forskalia_asymmetrica", "Forskalia_edwardsii", "Forskalia_tholoides")
clade_C = clade("Athorybia_rosacea", "Agalma_clausi", "Agalma_elegans", "Agalma_okenii", "Nanomia_bijuga", "Halistemma_rubrum")
clade_D = clade("Lychnagalma_utricularia","Physophora_gilmeri", "Physophora_hydrostatica", clade_C)
clade_BD = clade( clade_B, clade_D )
clade_ABC = clade( clade_A, clade_B, clade_D )
clade_E = clade( clade_ABC, "Erenna_richardi", "Erenna_sirena", "Erenna_laciniata", "Stephalia_dilata", "Thermopalia_sp", "Marrus_claudanielis", "Physonect_sp", "Stephanomia_amphytridis" )
clade_F = clade("Nectadamas_diomedeae", "Nectopyramis_natans", "Craseoa_lathetica", "Praya_dubia", "Rosacea_flaccida", "Hippopodius_hippopus", "Vogtia_glabra", "Vogtia_pentacantha", "Tottonophyes_enigmatica", "Gymnopraia_lapislazula", "Lilyopsis_fluoracantha", "Desmophyes_haematogaster","Kephyes_ovata", "Chuniphyes_moserae", "Chuniphyes_multidentata", "Crystallophyes_amygdalina", "Sphaeronectes_koellikeri", "Sphaeronectes_christiansonae", "Chelophyes_appendiculata", "Lensia_conoidea", "Sulculeolaria_quadrivalvis", "Muggiaea_atlantica", "Abylopsis_tetragona", "Diphyes_dispar", clade_E)
clade_G = clade("Bargmannia_amoena", "Bargmannia_elongata", clade_F)
codonophora = clade("Apolemia_lanosa", "Apolemia_rubriversa", clade_G)

outgroups = clade("Clytia_hemisphaerica", "Hydra_circumcincta", "Ectopleura_dumortieri", "Porpita_porpita", "Velella_velella", "Staurocladia_wellingtoni")

clade_constraints = [ clade_A, clade_B, clade_C, clade_D, clade_BD, clade_ABC, clade_E, clade_F, clade_G, codonophora, outgroups]

### the time tree is a stochastic node modeled by the constant rate birth-death process (dnBDP)

tree_prior = dnBDP(lambda=birth_rate, mu=death_rate, rho=rho, rootAge=root_time, samplingStrategy="uniform", condition="nTaxa", taxa=taxa)

#treeprior ~ dnUniformTimeTree(rootAge=1.0, taxa=taxa)
timetree ~ dnConstrainedTopology(tree_prior, constraints = clade_constraints, backbone = backbone)

### If you would like to specify a starting tree, simply use the .setValue() method
timetree.setValue(backbone)

moves[mi++] = mvScale(diversification,lambda=1.0,tune=true,weight=3.0)
moves[mi++] = mvSlide(turnover,delta=1.0,tune=true,weight=3.0)

####### Tree Moves #######

### add moves on the tree node times, including the root time, which is outside of the timetree 
moves[mi++] = mvNodeTimeSlideUniform(timetree, weight=30.0)
#moves[mi++] = mvTreeScale(tree=timetree, rootAge=1.0, delta=1.0, tune=true, weight=3.0)
#moves[mi++] = mvSlide(root_time, delta=2.0, tune=true, weight=10.0)
#moves[mi++] = mvScale(root_time, lambda=2.0, tune=true, weight=10.0)

### and moves for the tree topology
moves[mi++] = mvNNI(timetree, weight=8.0)
moves[mi++] = mvNarrow(timetree, weight=8.0)
moves[mi++] = mvFNPR(timetree, weight=8.0)
