################################################################################
#
# RevBayes Exercise: Bayesian inference using MCMC and output analysis
# 
# This file: Specifies the full model parameters and moves for a 2-gene
#        partition model
#
# authors: Tracy A. Heath, Michael Landis, Sebastian Hoehna and Brian R. Moore
#
################################################################################


#######################
# Reading in the Data #
#######################

# read in the character data
filenames <- v("18sublist.aln.fasta", "16sublist.aln.fasta")

n_data_subsets <- filenames.size()
for (i in 1:n_data_subsets) {
    data[i] = readDiscreteCharacterData(filenames[i])
}

# Get some useful variables from the data. We need these later on.
taxa <- data[1].taxa()
n_species <- data[1].ntaxa()
n_branches <- 2 * n_species - 3

mvi = 0
mni = 0

##################################
#      Substitution Model        #
#   Loop over each data subset   #
##################################
  
for (i in 1:n_data_subsets) {

    # exchangeability rates for partition i
    er_prior[i] <- v(1,1,1,1,1,1)
    er[i] ~ dnDirichlet(er_prior[i])
    moves[++mvi] = mvSimplexElementScale(er[i], alpha=10, tune=true, weight=3) 

    # stationary frequencies for partition i
    pi_prior[i] <- v(1,1,1,1)
    pi[i] ~ dnDirichlet(pi_prior[i])
    moves[++mvi] = mvSimplexElementScale(pi[i], alpha=10, tune=true, weight=2) 

    # rate matrix for partition i
    Q[i] := fnGTR(er[i],pi[i]) 
  
    # +Gamma for partition i
    alpha_prior_mean[i] <- 5.0
    alpha_prior_sd[i] <- 0.587405
    alpha[i] ~ dnLognormal( alpha_prior_mean[i], alpha_prior_sd[i] )
    gamma_rates[i] := fnDiscretizeGamma( alpha[i], alpha[i], 4, false )

    # add moves for the alpha parameter
    moves[++mvi] = mvScale(alpha[i],weight=2)

    # the probability of a site being invariable
    pinvar[i] ~ dnBeta(1,1)
    moves[++mvi] = mvScale(pinvar[i], lambda=0.1, tune=true, weight=2.0)
    moves[++mvi] = mvSlide(pinvar[i], delta=0.1, tune=true, weight=2.0)

}

##############
# Tree model #
##############

#Constraints on clades
names = v("Cordagalma_ordinatum", "Forskalia_formosa", "Forskalia_asymmetrica", "Forskalia_edwardsii", "Forskalia_tholoides", "Lychnagalma_utricularia","Physophora_gilmeri", "Physophora_hydrostatica", "Athorybia_rosacea", "Agalma_clausi", "Agalma_elegans", "Agalma_okenii", "Nanomia_bijuga", "Halistemma_rubrum", "Erenna_richardi", "Erenna_sirena", "Erenna_laciniata", "Stephalia_dilata", "Thermopalia_sp", "Marrus_claudanielis", "Stephanomia_amphitrydis", "Physonect_sp", "Resomia_ornicephala", "Frillagalma_vityazi")

# construct a variable for the tree drawn from a birth death process
ctt = clade(clade("Resomia_ornicephala", "Frillagalma_vityazi"), clade(clade("Cordagalma_ordinatum", "Forskalia_formosa", "Forskalia_asymmetrica", "Forskalia_edwardsii", "Forskalia_tholoides"), clade("Lychnagalma_utricularia","Physophora_gilmeri", "Physophora_hydrostatica", "Athorybia_rosacea", "Agalma_clausi", "Agalma_elegans", "Agalma_okenii", "Nanomia_bijuga", "Halistemma_rubrum")))
xxx = [clade(ctt, "Erenna_richardi", "Erenna_sirena", "Erenna_laciniata", "Stephalia_dilata", "Thermopalia_sp", "Marrus_claudanielis", "Physonect_sp", "Stephanomia_amphytridis")]
topology ~ dnUniformTopology(taxa=taxa, constraints=xxx)

# add topology Metropolis-Hastings moves
moves[++mvi] = mvNNI(topology, weight=1.0)
moves[++mvi] = mvSPR(topology, weight=1.0)

# create branch length vector and add moves
for (i in 1:n_branches) {
   br_lens[i] ~ dnExponential(10.0)
   moves[++mvi] = mvScale(br_lens[i])
}

# add deterministic node to monitor tree length
TL := sum(br_lens)

# unite topology and branch length vector into phylogeny object
phylogeny := treeAssembly(topology, br_lens)

###################
#Time BD diversification stuff
###################

diversification ~ dnExponential(10.0) 
moves[mvi++] = mvScale(diversification, lambda=1.0, tune=true, weight=3.0)

turnover ~ dnBeta(2.0, 2.0) 
moves[mvi++] = mvSlide(turnover,delta=1.0,tune=true,weight=3.0)

denom := abs(1.0 - turnover) 

birth_rate := diversification / denom
death_rate := (turnover * diversification) / denom

rho <- n_species/186
root_time ~ dnLognormal(0.5, 0.001, offset=1)
timetree ~ dnBDP(lambda=birth_rate, mu=death_rate, rho=rho, rootAge=root_time, samplingStrategy="uniform", condition="nTaxa", taxa=taxa)

#Moves

moves[mvi++] = mvNodeTimeSlideUniform(timetree, weight=30.0)
moves[mvi++] = mvSlide(root_time, delta=2.0, tune=true, weight=10.0)
moves[mvi++] = mvScale(root_time, lambda=2.0, tune=true, weight=10.0)
moves[mvi++] = mvTreeScale(tree=timetree, rootAge=root_time, delta=1.0, tune=true, weight=3.0)
moves[mvi++] = mvNNI(timetree, weight=8.0)
moves[mvi++] = mvNarrow(timetree, weight=8.0)
moves[mvi++] = mvFNPR(timetree, weight=8.0)


##################
#Molecular clock
##################

clock_rate ~ dnGamma(2.0,4.0)
moves[mvi++] = mvScale(clock_rate,lambda=0.5,tune=true,weight=5.0)
sf ~ dnDirichlet(v(1,1,1,1))
er2 ~ dnDirichlet(v(1,1,1,1,1,1))
Q2 := fnGTR(er2,sf)
moves[mvi++] = mvSimplexElementScale(er2, alpha=10.0, tune=true, weight=3.0)
moves[mvi++] = mvSimplexElementScale(sf, alpha=10.0, tune=true, weight=3.0)

D <- readDiscreteCharacterData(file="concatenate.fasta")
n_sites <- D.nchar()
mi = 1

phySeq ~ dnPhyloCTMC(tree=timetree, Q=Q2, branchRates=clock_rate, nSites=n_sites, type="DNA")
phySeq.clamp(D)


###################
# PhyloCTMC Model #
###################

part_rate_mult ~ dnDirichlet( rep(1.0, n_data_subsets) )
moves[++mvi] = mvSimplexElementScale(part_rate_mult, alpha=10, tune=true, weight=2) 

for (i in 1:n_data_subsets) {
    part_rate[i] := part_rate_mult[i] * n_data_subsets
}


for (i in 1:n_data_subsets) {
    phyloSeq[i] ~ dnPhyloCTMC(tree=phylogeny, Q=Q[i], branchRates=part_rate[i], siteRates=gamma_rates[i], pInv=pinvar[i], type="DNA")
    phyloSeq[i].clamp(data[i])
}


############
# Analysis #
############

mymodel = model(phylogeny)

# add monitors
monitors[1] = mnModel(filename="output/GMC_posterior_pp.log",printgen=10, separator = TAB)
monitors[++mni] = mnModel(filename="output/gene.log",printgen=10)
monitors[++mni] = mnFile(phylogeny, filename="output/gene.trees", printgen=100)
monitors[++mni] = mnScreen(alpha,printgen=100)


pow_p = powerPosterior(mymodel, moves, monitors, "output/GMC_bears_powp.out", cats=50, sampleFreq=10) 
pow_p.burnin(generations=5000,tuningInterval=200)
pow_p.run(generations=1000)

ss = steppingStoneSampler(file="output/GMC_bears_powp.out", powerColumnName="power", likelihoodColumnName="likelihood")
ss.marginal() 

### use path sampling to calculate marginal likelihoods
ps = pathSampler(file="output/GMC_bears_powp.out", powerColumnName="power", likelihoodColumnName="likelihood")
ps.marginal()

# run the analysis
mymcmc = mcmc(mymodel, moves, monitors)
mymcmc.burnin(10000,1000)
mymcmc.run(300000)

# summarize output
treetrace = readTreeTrace("output/gene.trees")
treetrace.summarize()

map_tree = mapTree(treetrace,"output/gene_map.tre")


# you may want to quit RevBayes now
q()