#################################################################################
#   Timetree full model specification and MCMC set up for estimating
#       time-calibrated phylogenies under a strict clock model
#################################################################################

setOption("useScaling","true")

### Load the sequence alignment
D <- readDiscreteCharacterData(file="concatenate.fasta")

### initialize an iterator for the moves vector
mi = 1

n_sites <- D.nchar()

### set up the birth-death model from file
### this file includes tree topology moves

############################################################################################
#   Birth-death, rho=55/186 model specification file -- FIXED topology
############################################################################################

## read in the tree 
backbone <- readTrees("timetree_rev_constrained/backbone_rooted_ultram.tre")[1]

### get helpful variables from the tree
n_taxa <- backbone.ntips()
taxa <- backbone.taxa()

#######################################
###### Birth-death process model  #####
#######################################

### diversification = birth_rate - death_rate
### assume an exponential prior distribution 
### and apply a scale proposal
diversification ~ dnExponential(10.0) 

### turnover = death_rate / birth_rate
### this parameter can only take values between 0 and 1
### use a Beta prior distribution
### and a slide move
turnover ~ dnBeta(2.0, 2.0) 

### the parameters of the BDP include birth and death rates
##### create a variable to ensure the rates are always positive (RealPos)
denom := abs(1.0 - turnover) 
birth_rate := diversification / denom
death_rate := (turnover * diversification) / denom

### rho is the probability of sampling species at the present
### fix this to 0.2957, since there are ~186 described species of siphonophores and we have sampled 55
rho <- 0.2957

### the root age is an independent stochastic node with a lognormal prior
mean_ra <- 0.5
stdv_ra <- 0.001
### the lognormal distribution is parameterized by mu which is a function of the mean and standard deviation
mu_ra <- ln(mean_ra) - ((stdv_ra*stdv_ra) * 0.5)
root_time ~ dnLnorm(mu_ra, stdv_ra, offset=1)

#######################
#Constraints on clades#
#######################

### the time tree is a stochastic node modeled by the constant rate birth-death process (dnBDP)
tree_prior = dnBDP(lambda=birth_rate, mu=death_rate, rho=rho, rootAge=root_time, samplingStrategy="uniform", condition="nTaxa", taxa=taxa)

timetree ~ dnConstrainedTopology(tree_prior, backbone = backbone)
timetree.setValue(backbone)

moves[mi++] = mvScale(diversification,lambda=1.0,tune=true,weight=3.0)
moves[mi++] = mvSlide(turnover,delta=1.0,tune=true,weight=3.0)

####### Tree Moves #######

### add moves on the tree node times, including the root time, which is outside of the timetree 
moves[mi++] = mvNodeTimeSlideUniform(timetree, weight=30.0)
#moves[mi++] = mvTreeScale(tree=timetree, rootAge=1.0, delta=1.0, tune=true, weight=3.0)
#moves[mi++] = mvSlide(root_time, delta=2.0, tune=true, weight=10.0)
#moves[mi++] = mvScale(root_time, lambda=2.0, tune=true, weight=10.0)

### and moves for the tree topology
moves[mi++] = mvNNI(timetree, weight=8.0)
moves[mi++] = mvNarrow(timetree, weight=8.0)
moves[mi++] = mvFNPR(timetree, weight=8.0)

############################################################################################
#            Timetree UCLN relaxed-clock model specification
############################################################################################

### get the number of branches in the tree
n_branches <- 2 * n_taxa - 3

### the rate along each branch is assigned a lognormal prior
### the expectation of the lognormal is the ucln_mean, and will be given an exponential hyperprior
ucln_mean ~ dnExponential(2.0)
### we will also estimate the standard deviation of the lognormal (ucln_sigma) with an exponential hyperprior
ucln_sigma ~ dnExponential(3.0)
### we can create deterministic nodes for the variance and mu of the lognormal
ucln_var := ucln_sigma * ucln_sigma
ucln_mu := ln(ucln_mean) - (ucln_var * 0.5)
### both the ucln_mean and ucln_sigma will be operated on by scale moves
moves[mi++] = mvScale(ucln_mean, lambda=1.0, tune=true, weight=4.0)
moves[mi++] = mvScale(ucln_sigma, lambda=0.5, tune=true, weight=4.0)

### now we will create a vector of stochastic nodes 
### each element in the vector represents a branch rate
### the indices of the vector correspond to branch indices in the tree
### using a for-lop initialize the branch rates and assign a move to each one
for(i in 1:n_branches){
    branch_rates[i] ~ dnLnorm(ucln_mu, ucln_sigma)
    moves[mi++] = mvScale(branch_rates[i],lambda=1.0,tune=true,weight=2.0)
}
### add 2 more moves on the branch rate vector
moves[mi++] = mvVectorScale(branch_rates,lambda=1.0,tune=true,weight=2.0) 
moves[mi++] = mvVectorSingleElementScale(branch_rates,lambda=30.0,tune=true,weight=1.0) 

### a helpful parameter to monitor
mean_rt := mean(branch_rates) 

### set up the GTR model and instantaneous rate matrix
############################################################################################
#     						  GTR matrix model specification
############################################################################################

# Get some useful variables from the data. We need these later on.
n_species <- D.ntaxa()

##################################
#       Substitution Model       #
##################################
  
# exchangeability rates for partition i
er_prior <- v(1,1,1,1,1,1)
er ~ dnDirichlet(er_prior)
moves[mi++] = mvSimplexElementScale(er, alpha=10, tune=true, weight=3) 

# stationary frequencies for partition i
pi_prior <- v(1,1,1,1)
pi ~ dnDirichlet(pi_prior)
moves[mi++] = mvSimplexElementScale(pi, alpha=10, tune=true, weight=2) 

# rate matrix for partition i
Q := fnGTR(er,pi) 

### the full phylogenetic CTMC
#phySeq ~ dnPhyloCTMC(tree=timetree, Q=Q, branchRates=branch_rates, nSites=n_sites, type="DNA")
phySeq ~ dnPhyloCTMC(tree=timetree, Q=Q, branchRates=mean_rt, nSites=n_sites, type="DNA")

### attach the observed sequence data
phySeq.clamp(D)

#############################
############ MCMC ###########
#############################

### workspace model wrapper ###
mymodel = model(er)

### set up the monitors that will output parameter values to file and screen 
monitors[1] = mnModel(filename="output/TimeTree_siphs_mcmc.log", printgen=10)
monitors[2] = mnFile(filename="output/TimeTree_siphs_mcmc.trees", printgen=10, timetree)
#monitors[3] = mnScreen(printgen=100, root_time)

### workspace mcmc ###
mymcmc = mcmc(mymodel, monitors, moves)

### pre-burnin to tune the proposals ###
mymcmc.burnin(generations=5000,tuningInterval=100)

### run the MCMC ###
mymcmc.run(generations=10000)

### display proposal acceptance rates and tuning ###
mymcmc.operatorSummary()

### summarize the trees ###
tt = readTreeTrace("output/TimeTree_siphs_mcmc.trees", "clock")
tt.summarize()

### write MAP tree to file
mapTree(tt, "output/TimeTree_siphs_mcmc_MAP.tre")

## quit ##
q()
